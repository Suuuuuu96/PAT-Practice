//https://pintia.cn/problem-sets/994805342720868352/problems/994805482919673856
//https://blog.csdn.net/Cooocktail/article/details/86992350
#include<cstdio>
#include<vector>
#include<set>
#include<algorithm>
#define N 10011
using namespace std;
set<int> re;
vector<int> temp;
vector<int> g[N];
int maxH=0;
int fa[N];
bool fl[N];
bool visit[N];
void inti(int n){
	for(int i=1;i<=n;i++){fa[i]=i;visit[i]=false;}
}
int findRoot(int x){
	if(x==fa[x])return x;
	fa[x]=findRoot(fa[x]);
	return fa[x];
}
void un(int x1,int x2){
	int r1=findRoot(x1);
	int r2=findRoot(x2);
	if(r1!=r2)
	fa[r2]=r1;
}
void BFS(int k,int deep=1){
	visit[k]=true;
	if(deep>maxH)
	{
		maxH=deep;
		temp.clear();
		temp.push_back(k);
	}
	else if(deep==maxH)temp.push_back(k);
	for(int i=0;i<=g[k].size()-1;i++)
		if(!visit[g[k][i]])
			BFS(g[k][i],deep+1);
}
int main()
{
	int i,n,j,v1,v2,sum=0;
	scanf("%d",&n);
	inti(n);
	for(i=1;i<=n-1;i++){
		scanf("%d%d",&v1,&v2);
		g[v1].push_back(v2);
		g[v2].push_back(v1);
		un(v1,v2);
	}
	for(i=1;i<=n;i++)
		if(!fl[fa[i]])
			{fl[fa[i]]=true;sum++;}
	if(sum!=1)
		{
		printf("Error: %d components",sum);
		return 0;
		}
	maxH=0;
	BFS(1);
	
	for(i=0;i<=temp.size()-1;i++)re.insert(temp[i]);
	int ne=temp[0];
	inti(n);
	maxH=0;
	temp.clear();
	BFS(ne);
	for(i=0;i<=temp.size()-1;i++)re.insert(temp[i]);
	set<int>::iterator it;
	for(it=re.begin();it!=re.end();it++)
		printf("%d\n",*it);
	//
	return 0;
}
/*
10
1 2
1 3
1 10
3 4
3 5
4 6
5 7
6 8
7 9

5
1 2
1 3
1 4
2 5

5
1 4
2 5
1 2
1 3

5
1 3
1 4
2 5
3 4

*/
