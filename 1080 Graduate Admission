#include<bits/stdc++.h>
#define N 40011
#define K 111
using namespace std;
struct node{
	int ge,gi,total,rank,num;
	vector<int> applicant;
}data[N];
bool cmp(node n1,node n2){
	return n1.total!=n2.total?n1.total>n2.total:n1.ge>n2.ge;
}
int main(){
	int n,k,i,j,m;
	int q[K]={0};
	set<int> admit[K],admitRank[K];
	cin>>n>>m>>k;
	for(i=0;i<=m-1;i++)cin>>q[i];
	for(i=0;i<=n-1;i++){
		data[i].num=i;
		cin>>data[i].ge>>data[i].gi;
		data[i].total=data[i].ge+data[i].gi;
		data[i].applicant.resize(k);
		for(j=0;j<=k-1;j++)
			cin>>data[i].applicant[j];
		
	}
	sort(data,data+n,cmp);
	data[0].rank=0;
	for(i=1;i<=n-1;i++){
		if(data[i].total==data[i-1].total&&data[i].ge==data[i-1].ge)
			data[i].rank=data[i-1].rank;
		else 
			data[i].rank=i;
	}
	for(i=0;i<=n-1;i++){
		for(auto it:data[i].applicant)
			if(q[it]>0){
				admit[it].insert(data[i].num);
				admitRank[it].insert(data[i].rank);
				q[it]--;
				break;
			}
			else if(admitRank[it].count(data[i].rank)){
				admit[it].insert(data[i].num);
				break;
			}		
	}
	for(i=0;i<=m-1;i++,cout<<endl){
		if(admit[i].empty())continue;
		auto it=admit[i].begin();
		cout<<*it;
		for(it++;it!=admit[i].end();it++)
			cout<<' '<<*it;
	}	
	return 0;
}
