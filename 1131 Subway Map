#include<bits/stdc++.h>
#define N 10010
#define inf 0x3f3f3f3f
using namespace std;
vector<int> a[N],re,temp;
unordered_map<int,int> line;
bool visit[N]={false};
int Transfer(const vector<int> &b){
	int i,n=b.size(),pre=line[b[0]+b[1]*10000],sum=1;
	for(i=2;i<=n-1;i++){
		if(line[b[i-1]+b[i]*10000]!=pre)sum++;
		pre=line[b[i-1]+b[i]*10000];
	}
	return sum;
}
int y,reStop=inf,reTransfer=inf;
void dfs(int x){
	if(visit[x]||temp.size()>reStop)return ;
	temp.push_back(x);
	visit[x]=true;
	if(x==y){
		int tempTransfer=Transfer(temp);
		if(temp.size()<reStop||temp.size()==reStop&&tempTransfer<reTransfer){
			reStop=temp.size();
			reTransfer=tempTransfer;
			re=temp;
		}
	}else{
		for(auto it=a[x].begin();it!=a[x].end();it++)
			dfs(*it);		
	}
	visit[x]=false;
	temp.pop_back();
}
int main(){
	int i,j,k,n,m,x;	
	scanf("%d",&n);
	for(i=1;i<=n;i++){
		scanf("%d%d",&m,&x);
		for(j=2;j<=m;j++){
			scanf("%d",&k);
			line[x*10000+k]=i;
			line[x+k*10000]=i;
			a[x].push_back(k);
			a[k].push_back(x);
			x=k;
		}
	}
	scanf("%d",&k);
	while(k--){
		scanf("%d%d",&x,&y);
		memset(visit,false,N);
		temp.clear();
		re.clear();
		reStop=reTransfer=inf;
		dfs(x);
		n=re.size();
		j=line[re[0]+re[1]*10000];
		printf("%d\nTake Line#%d from %04d to",n-1,j,re[0]);
		for(i=1;i<=n-2;i++){
			if(j!=line[re[i]+re[i+1]*10000])
			printf(" %04d.\nTake Line#%d from %04d to",re[i],line[re[i]+re[i+1]*10000],re[i]);
			j=line[re[i]+re[i+1]*10000];
		}
		printf(" %04d.\n",re[n-1]);
	}
	return 0;
}
